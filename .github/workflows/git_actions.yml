name: Test, Build, and Deploy to DockerHub and Azure

on:
  workflow_dispatch:
    inputs:
      log_errors:
        description: "Log errors if tests fail"
        required: true
        type: boolean
        default: false

      run_only_tests:
        description: "Run only tests without building and pushing Docker image"
        required: true
        type: boolean
        default: false

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run pytest
        env:
          API_KEY: ${{ secrets.API_KEY }}
        id: pytest
        run: |
          python -m pytest 2>&1 | tee pytest.log

      - name: Upload log if tests fail and logging enabled
        if: failure() && github.event.inputs.log_errors == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: test-log-error
          path: pytest.log

  build_and_push:
    runs-on: ubuntu-latest
    needs: test
    if: needs.test.result == 'success' && github.event.inputs.run_only_tests == 'false'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - name: Set Docker image tags
        run: |
          echo "IMAGE_TAG=latest" >> $GITHUB_ENV

      - name: Build the Docker image
        run: |
          docker build . --file Dockerfile --tag "${{ secrets.DOCKER_USERNAME }}/flaskapp_trafic:$IMAGE_TAG"

      - name: Push Docker image to Docker Hub
        run: |
          docker push "${{ secrets.DOCKER_USERNAME }}/flaskapp_trafic:$IMAGE_TAG"